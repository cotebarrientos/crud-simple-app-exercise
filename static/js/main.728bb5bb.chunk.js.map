{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","task","setTask","myTasks","setMyTasks","editMyTask","setEditMyTask","id","setId","error","setError","className","length","map","item","myTask","onClick","filteredArray","filter","deleteTask","console","log","editTask","onSubmit","e","preventDefault","trim","editedArray","nanoid","type","placeholder","onChange","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.728bb5bb.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { nanoid } from 'nanoid' // it generates a random id\n\n\nfunction App() {\n\n  // render a task\n  const [task, setTask] = useState('')\n  // render all tasks\n  const [myTasks, setMyTasks] = useState([])\n  // render edit form for tasks\n  const [editMyTask, setEditMyTask] = useState(false)\n  // set the current id\n  const [id, setId] = useState('')\n  // To show errors inside the form\n  const [error, setError] = useState(null)\n\n\n  // Add a new task from the form\n  const addTask = (e) => {\n    e.preventDefault()\n    console.log(task)\n    if(!task.trim()){\n      console.log(\"Empty element\")\n      setError(\"Please, you must write something in this field\")\n      return\n    }\n    console.log(task)\n    setMyTasks([\n      ...myTasks,\n      {id: nanoid(10), myTask: task}\n    ])\n\n    setTask('')\n    setError(null)\n  }\n\n  // Remove a task when the user press the delete button\n  const deleteTask = (id) => {\n    const filteredArray = myTasks.filter(item => item.id !== id)\n    setMyTasks(filteredArray)\n  }\n\n  // Edit a task created by pressing the edit button in the task list and using an edit form\n  const editTask = item => {\n    console.log(item)\n    setEditMyTask(true)\n    setTask(item.myTask)\n    setId(item.id)\n  }\n\n  // When the user press the edit button in the edit form\n  const editThisTask = e => {\n    e.preventDefault()\n    console.log(task)\n    if(!task.trim()){\n      console.log(\"Empty element\")\n      setError(\"Please, you must write something in this field\")\n      return\n    } \n\n    const editedArray =  myTasks.map(\n      item => item.id === id ? {id, myTask: task} : item\n    )\n\n    setMyTasks(editedArray)\n    setEditMyTask(false)\n    setTask('')\n    setId('')\n    setError(null)\n  }\n\n  return (\n    <div className=\"container mt-5 \">\n      <h1 className=\"text-center\">\n        <span className=\"text-success\">C</span>\n        <span className=\"text-primary\">R</span>\n        <span className=\"text-warning\">U</span>\n        <span className=\"text-danger\">D </span>\n        Simple App</h1>\n      <hr />\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <h4 className=\"text-center\">Tasks List</h4>\n          <ul className=\"list-group\">\n            {\n            /* Render every task  */\n\n              myTasks.length === 0 ? (\n                <li className=\"list-group-item\">\n                  <span className=\"lead\">Sorry, no items yet</span>\n                  <span className=\"padding-icons\">\n                  <i className=\"far fa-frown\"></i>\n                  </span>\n                </li>\n              ) : (\n                myTasks.map(item => (\n                  <li className=\"list-group-item\" key={item.id}>\n                    <span className=\"lead\">{item.myTask}</span>\n                    <button \n                      className=\"btn btn-danger btn-sm float-end mx-2\"\n                      onClick={() => deleteTask(item.id)}\n                    >\n                      <span className=\"text-uppercase\">Delete</span>\n                      <span className=\"padding-icons\">\n                        <i className=\"far fa-trash-alt\"></i>\n                      </span>  \n                    </button>\n  \n                    <button \n                      className=\"btn btn-warning btn-sm float-end\"\n                      onClick={() => editTask(item)}\n                    >\n                      <span className=\"text-uppercase\">Edit</span>\n                      <span className=\"padding-icons\">\n                        <i className=\"fas fa-pen\"></i>\n                      </span> \n                    </button>\n                  </li>\n                ))\n              ) \n            }\n          </ul>\n        </div>\n        <div className=\"col-4\">\n          <h4 className=\"text-center\">\n            {\n              editMyTask ? \"Edit a task\" : \"Add a task\"\n            }\n          </h4>\n          <form onSubmit={ editMyTask ? editThisTask : addTask }>\n\n            {\n              error ? <span className=\"text-danger\">{error}</span> : null\n            }\n\n            <input \n              type=\"text\" \n              className=\"form-control mb-2\"\n              placeholder=\"Add a new task\"\n              onChange={ (e) => setTask(e.target.value) }\n              value={task} \n            />\n            {\n              editMyTask ? (\n                <div className=\"d-grid gap-2\">\n                  <button className=\"btn btn-warning\" type=\"submit\">\n                    <span className=\"text-uppercase\">Edit</span>\n                    <span className=\"padding-icons\">\n                      <i className=\"fas fa-edit\"></i>\n                    </span>\n                  </button>\n                </div> \n              ) : (\n                <div className=\"d-grid gap-2\">\n                  <button className=\"btn btn-dark\" type=\"submit\">\n                    <span className=\"text-uppercase\">Add</span>\n                    <span className=\"padding-icons\">\n                      <i className=\"far fa-plus-square\"></i>\n                    </span>\n                    </button>\n                </div> \n              )\n            }\n          </form>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}